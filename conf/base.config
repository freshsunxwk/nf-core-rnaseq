/*
 * -------------------------------------------------
 *  Nextflow base config file
 * -------------------------------------------------
 * A 'blank slate' config file, appropriate for general
 * use on most high performace compute environments.
 * Assumes that all software is installed and available
 * on the PATH. Runs in `local` mode - all jobs will be
 * run on the logged in environment.
 */

params {
  // Main pipeline descriptors
  version = '1.5dev' // Pipeline version
  nf_required_version = '0.30.1' // Minimum version of Nextflow required
  container = 'nfcore/rnaseq:latest' // Container slug. Stable releases should specify release tag!
  
  // Pipeline Options
  aligner = 'star'
  forward_stranded = false
  reverse_stranded = false
  unstranded = false
  splicesites = false
  outdir = './results'
  hisatBuildMemory = 200 // Required amount of memory in GB to build HISAT2 index with splice sites
  saveReference = false
  saveTrimmed = false
  saveAlignedIntermediates = false
  singleEnd = false
  reads = "data/*{1,2}.fastq.gz"
  outdir = './results'

  // Custom trimming options
  clip_r1 = 0
  clip_r2 = 0
  three_prime_clip_r1 = 0
  three_prime_clip_r2 = 0
  sampleLevel = false
  clusterOptions = false

  // General options
  params.name = false
  params.project = false
  params.genome = false
  params.email = false
  params.plaintext_email = false
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h
  igenomes_base = 's3://ngi-igenomes/igenomes/'
  maxMultiqcEmailFileSize = 25.MB
}

process {

  container = params.container

  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'terminate' }
  maxRetries = 1
  maxErrors = '-1'

  // Process-specific resource requirements
  $makeSTARindex {
    cpus = { check_max( 10 * task.attempt, 'cpus' ) }
    memory = { check_max( 80.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  $makeHISATindex {
    cpus = { check_max( 10 * task.attempt, 'cpus' ) }
    memory = { check_max( 80.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h * task.attempt, 'time' ) }
  }
  $fastqc {
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  }
  $trim_galore {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  $star {
    cpus = { check_max( 10 * task.attempt, 'cpus' ) }
    memory = { check_max( 80.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  $hisat2Align {
    cpus = { check_max( 8 * task.attempt, 'cpus' ) }
    memory = { check_max( 64.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  $hisat2_sortOutput {
    cpus = { check_max( 4 * task.attempt, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  $rseqc {
    cpus = { check_max( 8 * task.attempt, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 7.h * task.attempt, 'time' ) }
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  }
  $genebody_coverage {
    cpus = { check_max( 1 * task.attempt, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 7.h * task.attempt, 'time' ) }
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  }
  $preseq {
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  }
  $markDuplicates {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  }
  $dupradar {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  }
  $sample_correlation {
    cpus = { check_max( 2 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  }
  $multiqc {
    memory = { check_max( 2.GB * task.attempt, 'memory' ) }
    errorStrategy = { task.exitStatus in [143,137] ? 'retry' : 'ignore' }
  }
  $get_software_versions {
    memory = { check_max( 2.GB, 'memory' ) }
    cache = false
    executor = 'local'
    errorStrategy = 'ignore'
  }
  $workflow_summary_mqc {
    memory = { check_max( 2.GB, 'memory' ) }
    cache = false
    executor = 'local'
    errorStrategy = 'ignore'
  }
}
